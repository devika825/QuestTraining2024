ARRAY FUNCTIONS

1. Array.Sort()
Sorts the elements of an array in ascending order.

int[] numbers = { 5, 2, 8, 3 };
Array.Sort(numbers);  // Output: { 2, 3, 5, 8 }

2. Array.Reverse()

Reverses the order of the elements in the entire array or a portion of it.

int[] numbers = { 1, 2, 3, 4 };
Array.Reverse(numbers);  // Output: { 4, 3, 2, 1 }

3. Array.Copy()
Copies a range of elements from one array to another.

int[] source = { 1, 2, 3, 4 };
int[] destination = new int[4];
Array.Copy(source, destination, 4);

4. Array.Clear()
Sets a range of elements in the array to the default value of the element type (e.g., 0 for integers).

int[] numbers = { 1, 2, 3, 4, 5 };
Array.Clear(numbers, 1, 2);  // Clears 2 elements starting from index 1

5. Array.IndexOf()
Returns the index of the first occurrence of a specified value in the array.

int[] numbers = { 1, 2, 3, 4, 5 };
int index = Array.IndexOf(numbers, 3);  // Output: 2

6. Array.LastIndexOf()
Returns the index of the last occurrence of a specified value in the array.

int[] numbers = { 1, 2, 3, 2, 5 };
int lastIndex = Array.LastIndexOf(numbers, 2);  // Output: 3

7. Array.Exists()
Checks if an array contains elements that match a condition defined by a predicate.

int[] numbers = { 1, 2, 3, 4, 5 };
bool exists = Array.Exists(numbers, element => element > 3);  // Output: true

8. Array.Find()
Returns the first element in the array that matches the condition defined by a predicate.

int[] numbers = { 1, 2, 3, 4, 5 };
int result = Array.Find(numbers, element => element > 3);  // Output: 4

13. Array.Resize()
Changes the size of the array. If the new size is larger, it fills new elements with the default value. If smaller, it trims the array.

int[] numbers = { 1, 2, 3, 4, 5 };
Array.Resize(ref numbers, 7);  // Output: { 1, 2, 3, 4, 5, 0, 0 }


STRING FUNCTIONS

1. Length
Returns the number of characters in a string.

string str = "Hello";
int length = str.Length;  // Output: 5

2. ToUpper()
Converts all characters in the string to uppercase.

string str = "hello";
string upperStr = str.ToUpper();  // Output: "HELLO"


3. ToLower()
Converts all characters in the string to lowercase.

string str = "HELLO";
string lowerStr = str.ToLower();  // Output: "hello"

4. Trim()
Removes all leading and trailing white-space characters from the string.

string str = "  hello  ";
string trimmedStr = str.Trim();  // Output: "hello"

5. Contains()
Determines whether the string contains a specified substring.

string str = "hello world";
bool contains = str.Contains("world");  // Output: true

6. Replace()
Replaces all occurrences of a specified character or substring with another character or substring.

string str = "hello";
string replacedStr = str.Replace('l', 'x');  // Output: "hexxo"

7. Split()
Splits a string into an array of substrings based on a specified delimiter.

string str = "apple,banana,orange";
string[] fruits = str.Split(',');  // Output: ["apple", "banana", "orange"]

8.Join()
Concatenates an array of strings into a single string, separated by a specified delimiter

string[] fruits = { "apple", "banana", "orange" };
string str = string.Join(", ", fruits);  // Output: "apple, banana, orange"

9.Compare()
Compares two strings and returns an integer indicating their relative order.

int result = string.Compare("apple", "banana");  // Output: -1 (apple is less than banana)

10. Remove()
Removes characters from the string, starting from a specified index.

string str = "hello";
string removedStr = str.Remove(2, 2);  // Output: "heo"










